#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_shader_clock : enable

#include "ray.glsl"
#include "sampling.glsl"

layout(set = 1, binding = 0, rgba8) uniform image2D image;
layout(set = 1, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 2) uniform CameraProperties
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;
layout(push_constant) uniform PushConstants { int frame; };

layout(location = 0) rayPayloadEXT HitPayload payload;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    // TODO: More samples == less luminance?
    const uint samples = 25;
    const uint depth = 20;
    const float hitStrength = 2.5;
    vec3 result = vec3(0);

    for (int i = 0; i < samples; ++i)
    {
        uint seed = TEA(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

        payload.hitValue = vec3(0);
        payload.seed = seed;
        payload.depth = 0;
        payload.rayOrigin = origin.xyz;
        payload.rayDirection = direction.xyz;
        payload.weight = vec3(0);

        vec3 hitValue  = vec3(0);
        vec3 currentWeight = vec3(1);

        for(; payload.depth < depth; ++payload.depth)
        {
            traceRayEXT(topLevelAS,             // acceleration structure
                        rayFlags,               // rayFlags
                        0xFF,                   // cullMask
                        0,                      // sbtRecordOffset
                        0,                      // sbtRecordStride
                        0,                      // missIndex
                        payload.rayOrigin,      // ray origin
                        tMin,                   // ray min range
                        payload.rayDirection,   // ray direction
                        tMax,                   // ray max range
                        0                       // payload (location = 0)
            );

            hitValue += payload.hitValue * currentWeight;
            currentWeight *= payload.weight;
        }

        result += hitValue * hitStrength;
    }

    result /= samples;

    // Do accumulation over time
    if (frame > 0)
    {
        float a = 1.0 / float(frame + 1);
        vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, result, a), 1.0));
    }
    else
    {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(result, 1.0));
    }
}
